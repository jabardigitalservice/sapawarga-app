stages:
  - versioning
  - code_quality
  - build
  # - test
  - deploy_staging
  - deploy_prod

versioning:
  image: alpine:latest
  stage: versioning
  only:
    - branches
  before_script:
    - apk add git
  script:
    - export VERSION=$(git describe)
    - echo $VERSION
    - echo $VERSION > version
  artifacts:
    paths:
      - version

code_quality:
  image: docker:stable
  stage: code_quality
  only:
    - merge_requests
    - develop
    - master
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker run
        --env SOURCE_CODE=$PWD
        --env CONTAINER_TIMEOUT_SECONDS=3600
        --env CODECLIMATE_DEBUG=1
        --volume $PWD:/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:11-8-stable" /code
  artifacts:
    paths: [gl-code-quality-report.json]
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week

build_image:
  stage: build
  image: docker/compose:latest
  only:
    - branches
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp .env-template .env
    - docker-compose build
    - docker images
    - docker-compose push

# test_api:
#   stage: test
#   image: docker/compose:latest
#   rules:
#     - changes:
#       - "**/*.{php,sql,yml}"
#   services:
#     - docker:stable-dind
#   variables:
#     GIT_COMMIT_SHA: $CI_COMMIT_SHA
#     GIT_BRANCH: $CI_COMMIT_REF_NAME
#   dependencies:
#     - versioning
#   before_script:
#     - apk add git
#     - export VERSION=$(cat ./version)
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - apk add --update curl && rm -rf /var/cache/apk/*
#     - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
#     - chmod +x ./cc-test-reporter
#     - ./cc-test-reporter before-build
#   script:
#     - cp .env-template .env
#     - sed -i "s/%COOKIE_VALIDATION_KEY%/cookiekey/g" .env
#     - sed -i "s/%APP_VERSION%/${VERSION}/g" .env
#     - sed -i "s/%MYSQL_HOST%/database/g" .env
#     - sed -i "s/%MYSQL_PORT%/3306/g" .env
#     - sed -i "s/%MYSQL_DATABASE%/sapawarga_test/g" .env
#     - sed -i "s/%MYSQL_USER%/sapawarga/g" .env
#     - sed -i "s/%MYSQL_PASSWORD%/secret/g" .env
#     - sed -i "s/%MYSQL_ROOT_PASSWORD%/secret/g" .env
#     - sed -i "s/%ERROR_REPORT%/false/g" .env
#     - cat .env
#     - docker-compose pull
#     - docker images
#     - COMPOSE_HTTP_TIMEOUT=500 docker-compose up -d
#     - sleep 60
#     - docker ps
#     - docker-compose exec -T api composer sniff
#     - docker-compose exec -T api php yii seeder
#     - docker-compose exec -T api php vendor/bin/codecept run --coverage --coverage-xml
#     - mv ./api/tests/_output/coverage.xml ./clover.xml
#     - sed -i "s|/srv|$(pwd)/api|g" clover.xml
#     - ./cc-test-reporter after-build --coverage-input-type clover --id $CC_TEST_REPORTER_ID

deploy_staging_aws:
  image: docker:stable
  stage: deploy_staging
  only:
    - develop
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - chmod 400 $SSH_STAGING_KEY_PRIVATE_AWS
    - ssh-add $SSH_STAGING_KEY_PRIVATE_AWS
  script:
    - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME_AWS}@${STAGING_HOST_AWS} "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME_AWS}@${STAGING_HOST_AWS} "export VERSION=${VERSION} && cd /home/ubuntu/projects/sapawarga-app && sudo git pull && sudo docker image prune -f && sudo -E docker-compose pull && sudo -E docker-compose down && sudo -E docker-compose up -d"
    - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME_AWS}@${STAGING_HOST_AWS} "sudo docker ps"
    - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME_AWS}@${STAGING_HOST_AWS} "sudo docker image prune -a -f"


deploy_staging_eks:
  stage: deploy_staging
  image: dtzar/helm-kubectl
  environment:
    name: staging
  only:
    - develop
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - kubectl config set-cluster k8s --server="${EKS_SERVER_V2}"
    - kubectl config set clusters.k8s.certificate-authority-data ${EKS_CA_V2}
    - kubectl config set-credentials gitlab-eks-admin-development --token="${EKS_TOKEN_V2}"
    - kubectl config set-context default --cluster=k8s --user=gitlab-eks-admin-development
    - kubectl config use-context default
    - kubectl cluster-info
  script:
    - cp kubernetes/backend-variables-sample.yaml kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_LOCAL_URL%/${APP_STORAGE_LOCAL_URL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_VERSION%/${VERSION}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%COOKIE_VALIDATION_KEY%/${COOKIE_VALIDATION_KEY}/g" kubernetes/backend-variables.yaml
    # Mysql STAGING #
    - sed -i "s/%MYSQL_HOST%/${MYSQL_HOST_STAGING}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_USER%/${MYSQL_USER}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_DATABASE%/${MYSQL_DATABASE}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PASSWORD%/${MYSQL_PASSWORD}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_ROOT_PASSWORD%/${MYSQL_ROOT_PASSWORD}/g" kubernetes/backend-variables.yaml

    # Redis Staging #
    - sed -i "s/%REDIS_HOST%/${REDIS_HOST}/g" kubernetes/backend-variables.yaml

    # mysql replica staging #
    - sed -i "s/%MYSQL_HOST_SLAVE_1%/${MYSQL_HOST_SLAVE_1}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_HOST_SLAVE_2%/${MYSQL_HOST_SLAVE_2}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_HOST_SLAVE_3%/${MYSQL_HOST_SLAVE_3}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_USER_SLAVE%/${MYSQL_USER}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PASSWORD_SLAVE%/${MYSQL_PASSWORD}/g" kubernetes/backend-variables.yaml

    # mysql dtks staging #
    - sed -i "s/%MYSQL_HOST_DTKS%/${MYSQL_HOST_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_USER_DTKS%/${MYSQL_USER_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PASSWORD_DTKS%/${MYSQL_PASSWORD_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_DATABASE_DTKS%/${MYSQL_DATABASE_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PORT_DTKS%/${MYSQL_PORT_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%S3_FOLDER_INVALID%/${S3_FOLDER_INVALID}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%S3_FOLDER_INVALID_VERVAL%/${S3_FOLDER_INVALID_VERVAL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%BANSOS_PROCESS_EXCEL_URL%/${BANSOS_PROCESS_EXCEL_URL}/g" kubernetes/backend-variables.yaml

    # Push Notif Staging #
    - sed -i "s/%FCM_KEY%/${FCM_KEY_STAGING}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%dockerconfigjson%/${dockerconfigjson}/g" kubernetes/backend-variables.yaml

    # Sentry STAGING
    - sed -i "s/%ERROR_ENVIRONMENT%/${ERROR_ENVIRONMENT}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%SENTRY_DSN%/${SENTRY_DSN}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%FRONTEND_URL%/${FRONTEND_URL}/g" kubernetes/backend-variables.yaml

    # External API STAGING
    - sed -i "s/%KEPENDUDUKAN_API_BASE_URL%/${KEPENDUDUKAN_API_BASE_URL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%KEPENDUDUKAN_API_KEY%/${KEPENDUDUKAN_API_KEY}/g" kubernetes/backend-variables.yaml

    # Mailer STAGING #
    - sed -i "s/%MAILER_TRANSPORT_FILE%/${MAILER_TRANSPORT_FILE}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_HOST%/${MAILER_HOST}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_USER%/${MAILER_USER}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_PASSWORD%/${MAILER_PASSWORD}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_PORT%/${MAILER_PORT}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_ENCRYPTION%/${MAILER_ENCRYPTION}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_FROM_EMAIL%/${MAILER_FROM_EMAIL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_FROM_NAME%/${MAILER_FROM_NAME}/g" kubernetes/backend-variables.yaml

    # AWS S3 STAGING#
    - sed -i "s/%APP_STORAGE_FS%/${APP_STORAGE_FS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_PUBLIC_URL%/${APP_STORAGE_PUBLIC_URL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_BUCKET_REGION%/${APP_STORAGE_S3_BUCKET_REGION}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_BUCKET%/${APP_STORAGE_S3_BUCKET}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_KEY%/${APP_STORAGE_S3_KEY}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_SECRET%/${APP_STORAGE_S3_SECRET}/g" kubernetes/backend-variables.yaml

     # version deployment #
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/backend-api-deployment.yaml
    - sed -i "s/%REPLICAS%/${REPLICAS}/g" kubernetes/backend-api-deployment.yaml
     # version queue jobs #
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/backend-queue-job.yaml
     # version queue jobs import #
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/backend-queue-import-job.yaml
    - kubectl create --dry-run --validate -f kubernetes/backend-variables.yaml
        -f kubernetes/backend-mysql-pv-claim.yaml
        -f kubernetes/backend-mysql-deployment.yaml
        -f kubernetes/backend-mysql-service.yaml
        -f kubernetes/backend-api-pv-claim.yaml
        -f kubernetes/backend-api-deployment.yaml
        -f kubernetes/backend-api-service.yaml
        -f kubernetes/backend-memcached-deployment.yaml
        -f kubernetes/backend-memcached-service.yaml
    - kubectl apply -f kubernetes/backend-variables.yaml
        -f kubernetes/backend-mysql-pv-claim.yaml
        -f kubernetes/backend-mysql-deployment.yaml
        -f kubernetes/backend-mysql-service.yaml
        -f kubernetes/backend-api-pv-claim.yaml
        -f kubernetes/backend-api-deployment.yaml
        -f kubernetes/backend-api-service.yaml
        -f kubernetes/backend-memcached-deployment.yaml
        -f kubernetes/backend-memcached-service.yaml
    - kubectl delete -f kubernetes/backend-queue-job.yaml
    - kubectl delete -f kubernetes/backend-queue-import-job.yaml
    - kubectl create --dry-run --validate -f kubernetes/backend-queue-job.yaml
    - kubectl create --dry-run --validate -f kubernetes/backend-queue-import-job.yaml
    - kubectl apply -f kubernetes/backend-queue-job.yaml
    - kubectl apply -f kubernetes/backend-queue-import-job.yaml


deploy_prod_eks:
  stage: deploy_prod
  image: dtzar/helm-kubectl
  when: manual
  only:
    - master
  dependencies:
    - versioning
  environment:
    name: production
  before_script:
    - export VERSION=$(cat ./version)
    - kubectl config set-cluster k8s --server="${EKS_SERVER_V2}"
    - kubectl config set clusters.k8s.certificate-authority-data ${EKS_CA_V2}
    - kubectl config set-credentials gitlab-eks-admin --token="${EKS_TOKEN_V2}"
    - kubectl config set-context default --cluster=k8s --user=gitlab-eks-admin
    - kubectl config use-context default
    - kubectl cluster-info
  script:
    - cp kubernetes/backend-variables-sample.yaml kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_LOCAL_URL%/${EKS_APP_STORAGE_LOCAL_URL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_VERSION%/${VERSION}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%COOKIE_VALIDATION_KEY%/${COOKIE_VALIDATION_KEY}/g" kubernetes/backend-variables.yaml
    # MYSQL PRODUCTION #
    - sed -i "s/%MYSQL_HOST%/${MYSQL_HOST}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_USER%/${MYSQL_USER}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PASSWORD%/${MYSQL_PASSWORD}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_DATABASE%/${MYSQL_DATABASE}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_ROOT_PASSWORD%/${MYSQL_ROOT_PASSWORD}/g" kubernetes/backend-variables.yaml

    - sed -i "s/%FCM_KEY%/${FCM_KEY}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%dockerconfigjson%/${dockerconfigjson}/g" kubernetes/backend-variables.yaml

    - sed -i "s/%ERROR_ENVIRONMENT%/${ERROR_ENVIRONMENT}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%SENTRY_DSN%/${SENTRY_DSN}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%FRONTEND_URL%/${FRONTEND_URL}/g" kubernetes/backend-variables.yaml

     # Redis Production #
    - sed -i "s/%REDIS_HOST%/${REDIS_HOST}/g" kubernetes/backend-variables.yaml

    # mysql replica production #
    - sed -i "s/%MYSQL_HOST_SLAVE_1%/${MYSQL_HOST_SLAVE_1}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_HOST_SLAVE_2%/${MYSQL_HOST_SLAVE_2}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_HOST_SLAVE_3%/${MYSQL_HOST_SLAVE_3}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_USER_SLAVE%/${MYSQL_USER}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PASSWORD_SLAVE%/${MYSQL_PASSWORD}/g" kubernetes/backend-variables.yaml

    # mysql dtks production #
    - sed -i "s/%MYSQL_HOST_DTKS%/${MYSQL_HOST_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_USER_DTKS%/${MYSQL_USER_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PASSWORD_DTKS%/${MYSQL_PASSWORD_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_DATABASE_DTKS%/${MYSQL_DATABASE_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MYSQL_PORT_DTKS%/${MYSQL_PORT_DTKS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%S3_FOLDER_INVALID%/${S3_FOLDER_INVALID}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%S3_FOLDER_INVALID_VERVAL%/${S3_FOLDER_INVALID_VERVAL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%BANSOS_PROCESS_EXCEL_URL%/${BANSOS_PROCESS_EXCEL_URL}/g" kubernetes/backend-variables.yaml

    # External API PRODUCTION
    - sed -i "s/%KEPENDUDUKAN_API_BASE_URL%/${KEPENDUDUKAN_API_BASE_URL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%KEPENDUDUKAN_API_KEY%/${KEPENDUDUKAN_API_KEY}/g" kubernetes/backend-variables.yaml
    # Mailer PRODUCTION
    - sed -i "s/%MAILER_TRANSPORT_FILE%/${MAILER_TRANSPORT_FILE}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_HOST%/${MAILER_HOST}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_USER%/${MAILER_USER}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_PASSWORD%/${MAILER_PASSWORD}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_PORT%/${MAILER_PORT}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_ENCRYPTION%/${MAILER_ENCRYPTION}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_FROM_EMAIL%/${MAILER_FROM_EMAIL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%MAILER_FROM_NAME%/${MAILER_FROM_NAME}/g" kubernetes/backend-variables.yaml
    # AWS S3 PRODUCTION #
    - sed -i "s/%APP_STORAGE_FS%/${APP_STORAGE_FS}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_PUBLIC_URL%/${APP_STORAGE_PUBLIC_URL}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_BUCKET_REGION%/${APP_STORAGE_S3_BUCKET_REGION}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_BUCKET%/${APP_STORAGE_S3_BUCKET}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_KEY%/${APP_STORAGE_S3_KEY}/g" kubernetes/backend-variables.yaml
    - sed -i "s/%APP_STORAGE_S3_SECRET%/${APP_STORAGE_S3_SECRET}/g" kubernetes/backend-variables.yaml
    # version deployment #
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/backend-api-deployment.yaml
    - sed -i "s/%REPLICAS%/${REPLICAS}/g" kubernetes/backend-api-deployment.yaml
    # version queue jobs #
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/backend-queue-job.yaml
    # version queue jobs import #
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/backend-queue-import-job.yaml
    - kubectl create --dry-run --validate -f kubernetes/backend-variables.yaml
        -f kubernetes/backend-mysql-pv-claim.yaml
        -f kubernetes/backend-mysql-deployment.yaml
        -f kubernetes/backend-mysql-service.yaml
        -f kubernetes/backend-api-pv-claim.yaml
        -f kubernetes/backend-api-deployment.yaml
        -f kubernetes/backend-api-service.yaml
        -f kubernetes/backend-memcached-deployment.yaml
        -f kubernetes/backend-memcached-service.yaml
    - kubectl apply -f kubernetes/backend-variables.yaml
        -f kubernetes/backend-mysql-pv-claim.yaml
        -f kubernetes/backend-mysql-deployment.yaml
        -f kubernetes/backend-mysql-service.yaml
        -f kubernetes/backend-api-pv-claim.yaml
        -f kubernetes/backend-api-deployment.yaml
        -f kubernetes/backend-api-service.yaml
        -f kubernetes/backend-memcached-deployment.yaml
        -f kubernetes/backend-memcached-service.yaml
    - kubectl delete -f kubernetes/backend-queue-job.yaml
    - kubectl delete -f kubernetes/backend-queue-import-job.yaml
    - kubectl create --dry-run --validate -f kubernetes/backend-queue-job.yaml
    - kubectl create --dry-run --validate -f kubernetes/backend-queue-import-job.yaml
    - kubectl apply -f kubernetes/backend-queue-job.yaml
    - kubectl apply -f kubernetes/backend-queue-import-job.yaml
